{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  let response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n  dispatch(stopSubmit(\"login\", {\n    _error: message\n  }));\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/react-social/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","getCaptchaUrl","captchaUrl","url","logout"],"mappings":"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","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {userId, email, login, isAuth}\r\n});\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    let response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n    dispatch(stopSubmit(\"login\", {_error: message}));\r\n    \r\n}\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}